import streamlit as st
import requests
import json
from streamlit_autorefresh import st_autorefresh
import time
import logging
from config import *
from server_config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=LOG_LEVEL,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("rms_ui")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RMS - Remote Management System",
    page_icon="üñ•Ô∏è",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "error" not in st.session_state:
    st.session_state.error = None
if "success" not in st.session_state:
    st.session_state.success = None

def show_messages():
    if st.session_state.error:
        st.error(st.session_state.error)
        st.session_state.error = None
    if st.session_state.success:
        st.success(st.session_state.success)
        st.session_state.success = None

def safe_request(method, url, **kwargs):
    try:
        response = method(url, **kwargs)
        response.raise_for_status()
        return response
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        st.session_state.error = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
        return None
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        st.session_state.error = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        return None

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üñ•Ô∏è RMS - Remote Management System")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º —Ö–æ—Å—Ç–∞
with st.sidebar:
    st.header("–í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å {SERVER_URL}/ui/get_clients")
        response = requests.get(f"{SERVER_URL}/ui/get_clients", timeout=AGENT_TIMEOUT)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        clients = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {list(clients.keys())}")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        clients = {}
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    clients = {}

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ö–æ—Å—Ç–æ–≤
    hostnames = list(clients.keys())
    if not hostnames:
        st.warning("""
        –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
        1. –°–µ—Ä–≤–µ—Ä RMS –∑–∞–ø—É—â–µ–Ω
        2. –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É
        3. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {SERVER_URL}
        """)
        selected_host = None
    else:
        selected_host = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç",
            hostnames,
            format_func=lambda x: f"{x} {'üü¢' if clients[x]['online'] else 'üî¥'}"
        )

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if selected_host:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.header("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("CPU", f"{clients[selected_host]['cpu']}%")
    with col2:
        st.metric("RAM", f"{clients[selected_host]['memory']}%")
    with col3:
        st.metric("–°—Ç–∞—Ç—É—Å", "–û–Ω–ª–∞–π–Ω" if clients[selected_host]['online'] else "–û—Ñ—Ñ–ª–∞–π–Ω")
    
    # –î–∏—Å–∫–∏
    st.subheader("üíæ –î–∏—Å–∫–∏")
    for disk, usage in clients[selected_host]['disks'].items():
        st.progress(usage/100, text=f"{disk}: {usage}%")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏
    st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª—É–∂–±
    col1, col2 = st.columns([3, 1])
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª—É–∂–±"):
            try:
                response = requests.post(
                    f"{SERVER_URL}/ui/push_task",
                    json={"host": selected_host, "cmd": "__list_services__"},
                    timeout=AGENT_TIMEOUT
                )
                response.raise_for_status()
                st.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª—É–∂–±: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É–∂–±
    try:
        services_response = requests.get(f"{SERVER_URL}/ui/get_services/{selected_host}", timeout=AGENT_TIMEOUT)
        services_response.raise_for_status()
        services = services_response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª—É–∂–±: {e}")
        services = []
    
    if services:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫
        col1, col2 = st.columns([2, 1])
        with col1:
            search_term = st.text_input("üîç –ü–æ–∏—Å–∫ —Å–ª—É–∂–±—ã", "")
        with col2:
            status_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", ["–í—Å–µ", "–†–∞–±–æ—Ç–∞–µ—Ç", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "–û—à–∏–±–∫–∞"])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–±—ã
        filtered_services = services
        if search_term:
            filtered_services = [s for s in filtered_services if 
                               search_term.lower() in s.get("name", "").lower() or 
                               search_term.lower() in s.get("display", "").lower()]
        if status_filter != "–í—Å–µ":
            filtered_services = [s for s in filtered_services if s.get("status", "") == status_filter]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ª—É–∂–±
        service_data = []
        for svc in filtered_services:
            status = svc.get("status", "N/A")
            status_color = {
                '–†–∞–±–æ—Ç–∞–µ—Ç': 'üü¢',
                '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞': 'üî¥',
                '–û—à–∏–±–∫–∞': '‚ö†Ô∏è'
            }.get(status, '‚ö™')
            
            service_data.append({
                "–ò–º—è": svc.get("name", "N/A"),
                "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è": svc.get("display", "N/A"),
                "–°—Ç–∞—Ç—É—Å": f"{status_color} {status}",
                "–¢–∏–ø –∑–∞–ø—É—Å–∫–∞": svc.get("start_type", "N/A"),
                "–û–ø–∏—Å–∞–Ω–∏–µ": svc.get("description", "N/A")
            })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            service_data,
            use_container_width=True,
            height=400  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª—É–∂–±–æ–π
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–æ–π")
        service_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—É", [s["name"] for s in filtered_services])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"):
                try:
                    response = requests.post(
                        f"{SERVER_URL}/ui/push_task",
                        json={"host": selected_host, "cmd": f"__service__::start::{service_name}"},
                        timeout=AGENT_TIMEOUT
                    )
                    response.raise_for_status()
                    st.success("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    time.sleep(1)
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
        
        with col2:
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
                try:
                    response = requests.post(
                        f"{SERVER_URL}/ui/push_task",
                        json={"host": selected_host, "cmd": f"__service__::stop::{service_name}"},
                        timeout=AGENT_TIMEOUT
                    )
                    response.raise_for_status()
                    st.success("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    time.sleep(1)
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
        
        with col3:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"):
                try:
                    response = requests.post(
                        f"{SERVER_URL}/ui/push_task",
                        json={"host": selected_host, "cmd": f"__service__::restart::{service_name}"},
                        timeout=AGENT_TIMEOUT
                    )
                    response.raise_for_status()
                    st.success("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    time.sleep(1)
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
    else:
        st.warning("""
        –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É–∂–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
        1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª—É–∂–±'
        2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–ª—É–∂–± Windows
        3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        """)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    st.header("üíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    command = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å"):
        if command:
            try:
                requests.post(
                    f"{SERVER_URL}/ui/push_task",
                    json={"host": selected_host, "cmd": command},
                    timeout=AGENT_TIMEOUT
                )
                st.success("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
    
    # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    try:
        results_response = requests.get(f"{SERVER_URL}/ui/get_results/{selected_host}", timeout=AGENT_TIMEOUT)
        results = results_response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        results = []
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if results:
        for result in reversed(results):
            with st.expander(f"–ö–æ–º–∞–Ω–¥–∞: {result['cmd']}"):
                st.code(result['result'])
        
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            try:
                requests.delete(f"{SERVER_URL}/ui/clear_results/{selected_host}", timeout=AGENT_TIMEOUT)
                st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
time.sleep(5)
st.rerun()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö/—É—Å–ø–µ—Ö–µ
show_messages()
