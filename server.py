from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, List
import uvicorn, time
import logging
from server_config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=LOG_LEVEL,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("rms_server")

app = FastAPI(title="RMS Server", version="1.0.0")

# –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚¨áÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ‚¨áÔ∏è

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ (–∏–º—è, IP, CPU, RAM, –¥–∏—Å–∫–∏)
clients_info: Dict[str, Dict] = {}

# –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
tasks: Dict[str, List[str]] = {}

# –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
results: Dict[str, List[Dict]] = {}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω")
online_status: Dict[str, float] = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–± –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: name, status, display)
service_states: Dict[str, List[Dict]] = {}

# üß± Pydantic-–º–æ–¥–µ–ª–∏ –¥–ª—è API

class ClientInfo(BaseModel):
    hostname: str
    ip: str
    cpu: float
    memory: float
    disks: Dict[str, float]

class Result(BaseModel):
    host: str
    cmd: str
    result: str

class Command(BaseModel):
    host: str
    cmd: str

def limit_results(host: str):
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–∞"""
    if host in results and len(results[host]) > MAX_RESULTS_PER_HOST:
        results[host] = results[host][-MAX_RESULTS_PER_HOST:]

def limit_tasks(host: str):
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è —Ö–æ—Å—Ç–∞"""
    if host in tasks and len(tasks[host]) > MAX_TASKS_PER_HOST:
        tasks[host] = tasks[host][-MAX_TASKS_PER_HOST:]

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞
@app.post("/agent/post_info")
async def post_info(info: ClientInfo):
    try:
        clients_info[info.hostname] = info.model_dump()
        online_status[info.hostname] = time.time()
        logger.info(f"Received info from {info.hostname}")
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Error processing info from {info.hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –ê–≥–µ–Ω—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É–∂–±
@app.post("/agent/post_services/{hostname}")
async def post_services(hostname: str, data: List[Dict]):
    try:
        service_states[hostname.lower()] = data
        logger.info(f"Updated services for {hostname}")
        return {"status": "services updated"}
    except Exception as e:
        logger.error(f"Error updating services for {hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç—É
@app.get("/agent/get_tasks/{hostname}")
async def get_tasks(hostname: str):
    try:
        commands = tasks.pop(hostname, [])
        if commands:
            logger.info(f"Sending {len(commands)} tasks to {hostname}")
        return {"commands": commands}
    except Exception as e:
        logger.error(f"Error getting tasks for {hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥ –æ—Ç –∞–≥–µ–Ω—Ç–∞
@app.post("/agent/post_result")
async def post_result(res: Result):
    try:
        if res.host not in results:
            results[res.host] = []
        results[res.host].append(res.model_dump())
        limit_results(res.host)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info(f"Received result from {res.host} for command: {res.cmd[:50]}...")
        return {"status": "received"}
    except Exception as e:
        logger.error(f"Error processing result from {res.host}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ø–æ–π–Ω—Ç—ã –¥–ª—è UI
# ‚úÖ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
@app.get("/ui/get_clients")
async def get_clients():
    try:
        current_time = time.time()
        return {
            k: {
                **v,
                "online": current_time - online_status.get(k, 0) < AGENT_TIMEOUT
            }
            for k, v in clients_info.items()
        }
    except Exception as e:
        logger.error(f"Error getting clients list: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è UI)
@app.get("/ui/get_results/{hostname}")
async def get_results(hostname: str):
    try:
        return results.get(hostname, [])
    except Exception as e:
        logger.error(f"Error getting results for {hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É
@app.post("/ui/push_task")
async def push_task(cmd: Command):
    try:
        if cmd.host not in tasks:
            tasks[cmd.host] = []
        tasks[cmd.host].append(cmd.cmd)
        limit_tasks(cmd.host)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        logger.info(f"Pushed task to {cmd.host}: {cmd.cmd[:50]}...")
        return {"status": "task added"}
    except Exception as e:
        logger.error(f"Error pushing task to {cmd.host}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
@app.delete("/ui/clear_results/{hostname}")
async def clear_results(hostname: str):
    try:
        results[hostname] = []
        logger.info(f"Cleared results for {hostname}")
        return {"status": f"cleared for {hostname}"}
    except Exception as e:
        logger.error(f"Error clearing results for {hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ UI –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–±
@app.get("/ui/get_services/{hostname}")
async def get_services(hostname: str):
    try:
        return service_states.get(hostname.lower(), [])
    except Exception as e:
        logger.error(f"Error getting services for {hostname}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚úÖ UI –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É–∂–±
@app.get("/ui/get_all_services")
async def get_all_services():
    try:
        return service_states
    except Exception as e:
        logger.error(f"Error getting all services: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"Starting RMS Server on {SERVER_HOST}:{SERVER_PORT}")
    uvicorn.run(app, host=SERVER_HOST, port=SERVER_PORT)
